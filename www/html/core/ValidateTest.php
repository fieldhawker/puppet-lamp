<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-24 at 01:15:38.
 */
class ValidateTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Validate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Validate;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Generated from @assert (null) == true.
     *
     * @covers Validate::isEmpty
     */
    public function testIsEmpty()
    {
        $this->assertTrue(
            $this->object->isEmpty(null)
        );
    }

    /**
     * Generated from @assert ('') == true.
     *
     * @covers Validate::isEmpty
     */
    public function testIsEmpty2()
    {
        $this->assertTrue(
            $this->object->isEmpty('')
        );
    }

    /**
     * Generated from @assert ('a') == false.
     *
     * @covers Validate::isEmpty
     */
    public function testIsEmpty3()
    {
        $this->assertFalse(
            $this->object->isEmpty('a')
        );
    }

    /**
     * Generated from @assert (0) == false.
     *
     * @covers Validate::isEmpty
     */
    public function testIsEmpty4()
    {
        $this->assertFalse(
            $this->object->isEmpty(0)
        );
    }

    /**
     * Generated from @assert (1) == false.
     *
     * @covers Validate::isEmpty
     */
    public function testIsEmpty5()
    {
        $this->assertFalse(
            $this->object->isEmpty(1)
        );
    }

    /**
     * Generated from @assert ('sample@gmail.com') == 1.
     *
     * @covers Validate::isMailAddress
     */
    public function testIsMailAddress()
    {
        $this->assertEquals(
            1,
            $this->object->isMailAddress('sample@gmail.com')
        );
    }

    /**
     * Generated from @assert (null) == 0.
     *
     * @covers Validate::isMailAddress
     */
    public function testIsMailAddress2()
    {
        $this->assertEquals(
            0,
            $this->object->isMailAddress(null)
        );
    }

    /**
     * Generated from @assert ('test') == 0.
     *
     * @covers Validate::isMailAddress
     */
    public function testIsMailAddress3()
    {
        $this->assertEquals(
            0,
            $this->object->isMailAddress('test')
        );
    }

    /**
     * Generated from @assert ('-aaa@gmail.com') == 0.
     *
     * @covers Validate::isMailAddress
     */
    public function testIsMailAddress4()
    {
        $this->assertEquals(
            0,
            $this->object->isMailAddress('-aaa@gmail.com')
        );
    }

    /**
     * Generated from @assert ('a', 0, 2) == true.
     *
     * @covers Validate::isCharaLengthRange
     */
    public function testIsCharaLengthRange()
    {
        $this->assertTrue(
            $this->object->isCharaLengthRange('a', 0, 2)
        );
    }

    /**
     * Generated from @assert ('a', 1, 2) == false.
     *
     * @covers Validate::isCharaLengthRange
     */
    public function testIsCharaLengthRange2()
    {
        $this->assertFalse(
            $this->object->isCharaLengthRange('a', 1, 2)
        );
    }

    /**
     * Generated from @assert ('a', 2, 2) == false.
     *
     * @covers Validate::isCharaLengthRange
     */
    public function testIsCharaLengthRange3()
    {
        $this->assertFalse(
            $this->object->isCharaLengthRange('a', 2, 2)
        );
    }

    /**
     * Generated from @assert ('a', 0, 1) == false.
     *
     * @covers Validate::isCharaLengthRange
     */
    public function testIsCharaLengthRange4()
    {
        $this->assertFalse(
            $this->object->isCharaLengthRange('a', 0, 1)
        );
    }

    /**
     * Generated from @assert ('a', 0, 2) == true.
     *
     * @covers Validate::isCharaLengthRange
     */
    public function testIsCharaLengthRange5()
    {
        $this->assertTrue(
            $this->object->isCharaLengthRange('a', 0, 2)
        );
    }

    /**
     * Generated from @assert ('a', 0) == true.
     *
     * @covers Validate::isCharaLengthMax
     */
    public function testIsCharaLengthMax()
    {
        $this->assertTrue(
            $this->object->isCharaLengthMax('a', 0)
        );
    }

    /**
     * Generated from @assert ('a', 1) == false.
     *
     * @covers Validate::isCharaLengthMax
     */
    public function testIsCharaLengthMax2()
    {
        $this->assertFalse(
            $this->object->isCharaLengthMax('a', 1)
        );
    }

    /**
     * Generated from @assert ('a', 2) == false.
     *
     * @covers Validate::isCharaLengthMax
     */
    public function testIsCharaLengthMax3()
    {
        $this->assertFalse(
            $this->object->isCharaLengthMax('a', 2)
        );
    }
}
